#####################
#### TRANSFER.SH ####
#####################

transfer() {
    # check arguments
    if [ $# -eq 0 ];
    then
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )

    # upload stdin or file
    file=$1

    if tty -s;
    then
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

        if [ ! -e $file ];
        then
            echo "File $file doesn't exists."
            return 1
        fi

        if [ -d $file ];
        then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd $(dirname $file) && zip -r -q - $(basename $file) >> $zipfile
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
            rm -f $zipfile
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
        fi
    else
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
    fi

    # cat output link
    cat $tmpfile

    # cleanup
    rm -f $tmpfile

    echo
}

# unlimited history
HISTSIZE=""
HISTFILESIZE=""
EDITOR='vim'

GOPATH=/home/luiz/devel/gopath

# pythonrc path
PYTHONSTARTUP=$HOME/.pythonrc.py

# pyenv
export PATH="/home/luiz/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

_it_autocompletion() {
    WORDS=`ls /home/luiz/devel/{stoq,softbox}/*/ -d | cut -d/ -f5-6 | sort`
    COMPREPLY=($(compgen -W "$WORDS" "${COMP_WORDS[1]}"))
}

# workon command / cd to project and activate pyenv virtualenv
function wk() {
    prj=$1
    if [ $# -eq 0 ]; then
        prj=`tmux display-message -p '#W'`
        if [ "$1" == bash ]; then
            prj=""
        fi
    fi
    __path=`find ~/devel/ -maxdepth 2 -type d -regex ".*\/$prj" | tail -n 1`
    cd $__path
    pyenv activate `basename $(pwd)` 2> /dev/null
}
complete -F _it_autocompletion wk

function mkdb() {
    sudo -u postgres createuser --createdb $1 -P
    sudo -u postgres createdb $1 -O $1
}

function mkpy() {
    mkdir $1 -p
    touch $1/__init__.py
}

function it() {
    if [ $# -eq 0 ]; then
        echo 'Missing project name. Aborting.'
        return
    fi

    if ! tmux has-session -t dev; then
        tmux new-session -s dev -d -n $1
    else
        if tmux list-windows -F '#W' | grep "$1$" > /dev/null; then
            echo 'Window already exists. Aborting.'
            return
        fi
        tmux new-window -t dev -n $1
    fi
    tmux send-keys -t dev:$1 "wk $1" C-m
    tmux send-keys -t dev:$1 "tmux split-window -t dev:$1 -d -v -l 17" C-m
    tmux send-keys -t dev:$1 "tmux split-window -t dev:$1.2 -d -h" C-m
    tmux send-keys -t dev:$1 "tmux send-keys -t dev:$1.1 'clear && vim' C-m" C-m
    tmux send-keys -t dev:$1 "tmux send-keys -t dev:$1.2 'wk $1; clear' C-m" C-m
    tmux send-keys -t dev:$1 "tmux send-keys -t dev:$1.3 'wk $1; clear' C-m && clear" C-m
    tmux attach -t dev
}

complete -F _it_autocompletion it

function lg() {
    rg -p "$@" | less -RK
}

function cu() {
    curl --silent "$@" | json_pp
}

function pu() {
    name=`echo $1 | cut -f1 -d"."`
    plantuml $name.puml $@ \
        && eog $name.png
}
